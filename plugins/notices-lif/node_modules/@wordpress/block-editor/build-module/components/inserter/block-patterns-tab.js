import { createElement, Fragment } from "@wordpress/element";
/**
 * WordPress dependencies
 */
import { useMemo, useState, useCallback, useRef, useEffect } from '@wordpress/element';
import { _x, __, _n, isRTL, sprintf } from '@wordpress/i18n';
import { useViewportMatch } from '@wordpress/compose';
import { __experimentalItemGroup as ItemGroup, __experimentalItem as Item, __experimentalHStack as HStack, FlexBlock, Button } from '@wordpress/components';
import { Icon, chevronRight, chevronLeft } from '@wordpress/icons';
import { focus } from '@wordpress/dom';
import { speak } from '@wordpress/a11y';

/**
 * Internal dependencies
 */
import usePatternsState from './hooks/use-patterns-state';
import BlockPatternList from '../block-patterns-list';
import PatternsExplorerModal from './block-patterns-explorer/explorer';
import MobileTabNavigation from './mobile-tab-navigation';
import BlockPatternsPaging from '../block-patterns-paging';
import usePatternsPaging from './hooks/use-patterns-paging';
import { PATTERN_TYPES, default as BlockPatternsSourceFilter } from './block-patterns-source-filter';
import { BlockPatternsSyncFilter, SYNC_TYPES } from './block-patterns-sync-filter';
const noop = () => {};
export const allPatternsCategory = {
  name: 'allPatterns',
  label: __('All categories')
};
export function isPatternFiltered(pattern, sourceFilter, syncFilter) {
  if (sourceFilter === PATTERN_TYPES.theme && pattern.name.startsWith('core/block')) {
    return true;
  }
  if (sourceFilter === PATTERN_TYPES.user && !pattern.id) {
    return true;
  }
  if (sourceFilter === PATTERN_TYPES.user && syncFilter === SYNC_TYPES.full && pattern.syncStatus !== '') {
    return true;
  }
  if (sourceFilter === PATTERN_TYPES.user && syncFilter === SYNC_TYPES.unsynced && pattern.syncStatus !== 'unsynced') {
    return true;
  }
  return false;
}
export function usePatternsCategories(rootClientId, sourceFilter = 'all') {
  const [patterns, allCategories] = usePatternsState(undefined, rootClientId);
  const filteredPatterns = useMemo(() => sourceFilter === 'all' ? patterns : patterns.filter(pattern => !isPatternFiltered(pattern, sourceFilter)), [sourceFilter, patterns]);
  const hasRegisteredCategory = useCallback(pattern => {
    if (!pattern.categories || !pattern.categories.length) {
      return false;
    }
    return pattern.categories.some(cat => allCategories.some(category => category.name === cat));
  }, [allCategories]);

  // Remove any empty categories.
  const populatedCategories = useMemo(() => {
    const categories = allCategories.filter(category => filteredPatterns.some(pattern => pattern.categories?.includes(category.name))).sort((a, b) => a.label.localeCompare(b.label));
    if (filteredPatterns.some(pattern => !hasRegisteredCategory(pattern)) && !categories.find(category => category.name === 'uncategorized')) {
      categories.push({
        name: 'uncategorized',
        label: _x('Uncategorized')
      });
    }
    if (filteredPatterns.length > 0) {
      categories.unshift({
        name: allPatternsCategory.name,
        label: allPatternsCategory.label
      });
    }
    speak(sprintf( /* translators: %d: number of categories . */
    _n('%d category button displayed.', '%d category buttons displayed.', categories.length), categories.length));
    return categories;
  }, [allCategories, filteredPatterns, hasRegisteredCategory]);
  return populatedCategories;
}
export function BlockPatternsCategoryDialog({
  rootClientId,
  onInsert,
  onHover,
  category,
  showTitlesAsTooltip,
  patternFilter
}) {
  const container = useRef();
  useEffect(() => {
    const timeout = setTimeout(() => {
      const [firstTabbable] = focus.tabbable.find(container.current);
      firstTabbable?.focus();
    });
    return () => clearTimeout(timeout);
  }, [category]);
  return createElement("div", {
    ref: container,
    className: "block-editor-inserter__patterns-category-dialog"
  }, createElement(BlockPatternsCategoryPanel, {
    rootClientId: rootClientId,
    onInsert: onInsert,
    onHover: onHover,
    category: category,
    showTitlesAsTooltip: showTitlesAsTooltip,
    patternFilter: patternFilter
  }));
}
export function BlockPatternsCategoryPanel({
  rootClientId,
  onInsert,
  onHover = noop,
  category,
  showTitlesAsTooltip,
  patternFilter
}) {
  const [allPatterns,, onClickPattern] = usePatternsState(onInsert, rootClientId);
  const [patternSyncFilter, setPatternSyncFilter] = useState('all');
  const availableCategories = usePatternsCategories(rootClientId, patternFilter);
  const container = useRef();
  const currentCategoryPatterns = useMemo(() => allPatterns.filter(pattern => {
    var _pattern$categories$f;
    if (isPatternFiltered(pattern, patternFilter, patternSyncFilter)) {
      return false;
    }
    if (category.name === allPatternsCategory.name) {
      return true;
    }
    if (category.name !== 'uncategorized') {
      return pattern.categories?.includes(category.name);
    }

    // The uncategorized category should show all the patterns without any category
    // or with no available category.
    const availablePatternCategories = (_pattern$categories$f = pattern.categories?.filter(cat => availableCategories.find(availableCategory => availableCategory.name === cat))) !== null && _pattern$categories$f !== void 0 ? _pattern$categories$f : [];
    return availablePatternCategories.length === 0;
  }), [allPatterns, availableCategories, category.name, patternFilter, patternSyncFilter]);
  const pagingProps = usePatternsPaging(currentCategoryPatterns, category, container);

  // Hide block pattern preview on unmount.
  // eslint-disable-next-line react-hooks/exhaustive-deps
  useEffect(() => () => onHover(null), []);
  return createElement("div", {
    className: "block-editor-inserter__patterns-category-panel",
    ref: container
  }, createElement("div", {
    className: "block-editor-inserter__patterns-category-panel-title"
  }, category.label), createElement("p", null, category.description), patternFilter === PATTERN_TYPES.user && createElement(BlockPatternsSyncFilter, {
    patternSyncFilter: patternSyncFilter,
    setPatternSyncFilter: setPatternSyncFilter
  }), !currentCategoryPatterns.length && createElement("div", null, __('No results found')), currentCategoryPatterns.length > 0 && createElement(BlockPatternList, {
    shownPatterns: pagingProps.categoryPatternsAsyncList,
    blockPatterns: pagingProps.categoryPatterns,
    onClickPattern: onClickPattern,
    onHover: onHover,
    label: category.label,
    orientation: "vertical",
    category: category.name,
    isDraggable: true,
    showTitlesAsTooltip: showTitlesAsTooltip,
    patternFilter: patternFilter
  }), pagingProps.numPages > 1 && createElement(BlockPatternsPaging, {
    ...pagingProps
  }));
}
function BlockPatternsTabs({
  onSelectCategory,
  selectedCategory,
  onInsert,
  rootClientId
}) {
  const [showPatternsExplorer, setShowPatternsExplorer] = useState(false);
  const [patternSourceFilter, setPatternSourceFilter] = useState('all');
  const categories = usePatternsCategories(rootClientId, patternSourceFilter);
  const initialCategory = selectedCategory || categories[0];
  const isMobile = useViewportMatch('medium', '<');
  return createElement(Fragment, null, !isMobile && createElement("div", {
    className: "block-editor-inserter__block-patterns-tabs-container"
  }, createElement("nav", {
    "aria-label": __('Block pattern categories'),
    className: "block-editor-inserter__block-patterns-tabs"
  }, createElement(BlockPatternsSourceFilter, {
    value: patternSourceFilter,
    onChange: value => {
      setPatternSourceFilter(value);
      onSelectCategory(allPatternsCategory, value);
    }
  }), createElement(ItemGroup, {
    role: "list"
  }, categories.map(category => createElement(Item, {
    role: "listitem",
    key: category.name,
    onClick: () => onSelectCategory(category, patternSourceFilter),
    className: category === selectedCategory ? 'block-editor-inserter__patterns-category block-editor-inserter__patterns-selected-category' : 'block-editor-inserter__patterns-category',
    "aria-label": category.label,
    "aria-current": category === selectedCategory ? 'true' : undefined
  }, createElement(HStack, null, createElement(FlexBlock, null, category.label), createElement(Icon, {
    icon: isRTL() ? chevronLeft : chevronRight
  })))), createElement("div", {
    role: "listitem"
  }, createElement(Button, {
    className: "block-editor-inserter__patterns-explore-button",
    onClick: () => setShowPatternsExplorer(true),
    variant: "secondary"
  }, __('Explore all patterns')))))), isMobile && createElement(MobileTabNavigation, {
    categories: categories
  }, category => createElement(BlockPatternsCategoryPanel, {
    onInsert: onInsert,
    rootClientId: rootClientId,
    category: category,
    showTitlesAsTooltip: false
  })), showPatternsExplorer && createElement(PatternsExplorerModal, {
    initialCategory: initialCategory,
    patternCategories: categories,
    onModalClose: () => setShowPatternsExplorer(false),
    rootClientId: rootClientId
  }));
}
export default BlockPatternsTabs;
//# sourceMappingURL=block-patterns-tab.js.map